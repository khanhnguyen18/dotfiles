#+title: Dashboard
* Dashboard config

** My doom emacs
- Mình muốn giả lập doom emacs chạy độc lập
#+begin_src emacs-lisp
;;; Autoload

(defun +ndk-dashboard--help-echo ()
  (when-let* ((btn (button-at (point)))
              (msg (button-get btn 'help-echo)))
    (message "%s" msg)))

;;;###autoload
(defun +ndk-dashboard/open (frame)
  "Switch to the dashboard in the current window, of the current FRAME."
  (interactive (list (selected-frame)))
  (with-selected-frame frame
    (switch-to-buffer (doom-fallback-buffer))
    (+ndk-dashboard-reload t)))


;;;###autoload
(defun +ndk-dashboard/forward-button (n)
  "Like `forward-button', but don't wrap."
  (interactive "p")
  (forward-button n nil)
  (+ndk-dashboard--help-echo))

;;;###autoload
(defun +ndk-dashboard/backward-button (n)
  "Like `backward-button', but don't wrap."
  (interactive "p")
  (backward-button n nil)
  (+ndk-dashboard--help-echo))

#+end_src

#+begin_src emacs-lisp
;;; ui/ndk-dashboard/config.el -*- lexical-binding: t; -*-
(defvar +ndk-dashboard-name "*doom*"
  "The name to use for the dashboard buffer.")

(defvar +ndk-dashboard-functions
  '(ndk-dashboard-widget-banner
    ndk-dashboard-widget-shortmenu
    ndk-dashboard-widget-loaded
    ndk-dashboard-widget-footer)
  "List of widget functions to run in the dashboard buffer to construct the
dashboard. These functions take no arguments and the dashboard buffer is current
while they run.")

(defvar +ndk-dashboard-banner-file "default.png"
  "The path to the image file to be used in on the dashboard. The path is
relative to `+ndk-dashboard-banner-dir'. If nil, always use the ASCII banner.")

(defvar +ndk-dashboard-banner-dir (concat (dir!) "/banners/")
  "Where to look for `+ndk-dashboard-banner-file'.")

(defvar +ndk-dashboard-ascii-banner-fn #'ndk-dashboard-draw-ascii-banner-fn
  "The function used to generate the ASCII banner on Doom's dashboard.")

(defvar +ndk-dashboard-banner-padding '(0 . 4)
  "Number of newlines to pad the banner with, above and below, respectively.")

(defvar +ndk-dashboard-inhibit-refresh nil
  "If non-nil, the doom buffer won't be refreshed.")

(defvar +ndk-dashboard-inhibit-functions ()
  "A list of functions which take no arguments. If any of them return non-nil,
dashboard reloading is inhibited.")

(defvar +ndk-dashboard-pwd-policy 'last-project
  "The policy to use when setting the `default-directory' in the dashboard.

Possible values:

  'last-project  The `doom-project-root' of the last open buffer. Falls back
                 to `default-directory' if not in a project.
  'last          The `default-directory' of the last open buffer
  a FUNCTION     A function run with the `default-directory' of the last
                 open buffer, that returns a directory path
  a STRING       A fixed path
  nil            `default-directory' will never change")

(defvar +ndk-dashboard-menu-sections
  '(("Reload last session"
     :icon (all-the-icons-octicon "history" :face 'ndk-dashboard-menu-title)
     :when (cond ((featurep! :ui workspaces)
                  (file-exists-p (expand-file-name persp-auto-save-fname persp-save-dir)))
                 ((require 'desktop nil t)
                  (file-exists-p (desktop-full-file-name))))
     :face (:inherit (ndk-dashboard-menu-title bold))
     :action doom/quickload-session)
    ("Open org-agenda"
     :icon (all-the-icons-octicon "calendar" :face 'ndk-dashboard-menu-title)
     :when (fboundp 'org-agenda)
     :action org-agenda)
    ("Recently opened files"
     :icon (all-the-icons-octicon "file-text" :face 'ndk-dashboard-menu-title)
     :action recentf-open-files)
    ("Open project"
     :icon (all-the-icons-octicon "briefcase" :face 'ndk-dashboard-menu-title)
     :action projectile-switch-project)
    ("Jump to bookmark"
     :icon (all-the-icons-octicon "bookmark" :face 'ndk-dashboard-menu-title)
     :action bookmark-jump)
    ("Open private configuration"
     :icon (all-the-icons-octicon "tools" :face 'ndk-dashboard-menu-title)
     :when (file-directory-p doom-private-dir)
     :action doom/open-private-config)
    ("Open documentation"
     :icon (all-the-icons-octicon "book" :face 'ndk-dashboard-menu-title)
     :action doom/help))
  "An alist of menu buttons used by `ndk-dashboard-widget-shortmenu'. Each
element is a cons cell (LABEL . PLIST). LABEL is a string to display after the
icon and before the key string.

PLIST can have the following properties:

  :icon FORM
    Uses the return value of FORM as an icon (can be literal string).
  :key STRING
    The keybind displayed next to the button.
  :when FORM
    If FORM returns nil, don't display this button.
  :face FACE
    Displays the icon and text with FACE (a face symbol).
  :action FORM
    Run FORM when the button is pushed.")

;;
(defvar +ndk-dashboard--last-cwd nil)
(defvar +ndk-dashboard--width 80)
(defvar +ndk-dashboard--old-fringe-indicator fringe-indicator-alist)
(defvar +ndk-dashboard--pwd-alist ())
(defvar +ndk-dashboard--reload-timer nil)

(defvar all-the-icons-scale-factor)
(defvar all-the-icons-default-adjust)


;;
;;; Bootstrap

(defun +ndk-dashboard-init-h ()
  "Initializes Doom's dashboard."
  (unless noninteractive
    ;; Ensure the dashboard becomes Emacs' go-to buffer when there's nothing
    ;; else to show.
    (setq doom-fallback-buffer-name +ndk-dashboard-name
          initial-buffer-choice #'doom-fallback-buffer)
    (unless fancy-splash-image
      (setq fancy-splash-image
            (expand-file-name +ndk-dashboard-banner-file
                              +ndk-dashboard-banner-dir)))
    (when (equal (buffer-name) "*scratch*")
      (set-window-buffer nil (doom-fallback-buffer))
      (+ndk-dashboard-reload))
    (add-hook 'doom-load-theme-hook #'+ndk-dashboard-reload-on-theme-change-h)
    ;; Ensure the dashboard is up-to-date whenever it is switched to or resized.
    (add-hook 'window-configuration-change-hook #'+ndk-dashboard-resize-h)
    (add-hook 'window-size-change-functions #'+ndk-dashboard-resize-h)
    (add-hook 'doom-switch-buffer-hook #'+ndk-dashboard-reload-maybe-h)
    (add-hook 'delete-frame-functions #'+ndk-dashboard-reload-frame-h)
    ;; `persp-mode' integration: update `default-directory' when switching perspectives
    (add-hook 'persp-created-functions #'+ndk-dashboard--persp-record-project-h)
    (add-hook 'persp-activated-functions #'+ndk-dashboard--persp-detect-project-h)
    ;; HACK Fix #2219 where, in GUI daemon frames, the dashboard loses center
    ;;      alignment after switching (or killing) workspaces.
    (when (daemonp)
      (add-hook 'persp-activated-functions #'+ndk-dashboard-reload-maybe-h))
    (add-hook 'persp-before-switch-functions #'+ndk-dashboard--persp-record-project-h)))

(add-hook 'doom-init-ui-hook #'+ndk-dashboard-init-h 'append)

;;
;;; Faces
(defgroup ndk-dashboard nil
  "Manage how ndk-dashboard is coloured and themed."
  :prefix "ndk-dashboard"
  :group 'doom-themes)

(defface ndk-dashboard-banner '((t (:inherit font-lock-comment-face)))
  "Face used for the DOOM banner on the dashboard"
  :group 'ndk-dashboard)

(defface ndk-dashboard-footer '((t (:inherit font-lock-keyword-face)))
  "Face used for the footer on the dashboard"
  :group 'ndk-dashboard)

(defface ndk-dashboard-footer-icon '((t (:inherit all-the-icons-green)))
  "Face used for the icon of the footer on the dashboard"
  :group 'ndk-dashboard)

(defface ndk-dashboard-loaded '((t (:inherit font-lock-comment-face)))
  "Face used for the loaded packages benchmark"
  :group 'ndk-dashboard)

(defface ndk-dashboard-menu-desc '((t (:inherit font-lock-constant-face)))
  "Face used for the key description of menu widgets on the dashboard"
  :group 'ndk-dashboard)

(defface ndk-dashboard-menu-title '((t (:inherit font-lock-keyword-face)))
  "Face used for the title of menu widgets on the dashboard"
  :group 'ndk-dashboard)


;;
;;; Major mode

(define-derived-mode +ndk-dashboard-mode special-mode
  (format "DOOM v%s" doom-version)
  "Major mode for the DOOM dashboard buffer."
  :syntax-table nil
  :abbrev-table nil
  (buffer-disable-undo)
  (setq truncate-lines t)
  (setq-local whitespace-style nil)
  (setq-local show-trailing-whitespace nil)
  (setq-local hscroll-margin 0)
  (setq-local tab-width 2)
  ;; Don't scroll to follow cursor
  (setq-local scroll-preserve-screen-position nil)
  (setq-local auto-hscroll-mode nil)
  ;; Line numbers are ugly with large margins
  (setq-local display-line-numbers-type nil)
  (cl-loop for (car . _cdr) in fringe-indicator-alist
           collect (cons car nil) into alist
           finally do (setq-local fringe-indicator-alist alist))
  ;; Ensure point is always on a button
  (add-hook 'post-command-hook #'+ndk-dashboard-reposition-point-h nil 'local)
  ;; hl-line produces an ugly cut-off line highlight in the dashboard, so don't
  ;; activate it there (by pretending it's already active).
  (setq-local hl-line-mode t))

(define-key! +ndk-dashboard-mode-map
  [left-margin mouse-1]   #'ignore
  [remap forward-button]  #'+ndk-dashboard/forward-button
  [remap backward-button] #'+ndk-dashboard/backward-button
  "n"       #'forward-button
  "p"       #'backward-button
  "C-n"     #'forward-button
  "C-p"     #'backward-button
  [down]    #'forward-button
  [up]      #'backward-button
  [tab]     #'forward-button
  [backtab] #'backward-button

  ;; Evil remaps
  [remap evil-next-line]     #'forward-button
  [remap evil-previous-line] #'backward-button
  [remap evil-next-visual-line]     #'forward-button
  [remap evil-previous-visual-line] #'backward-button
  [remap evil-paste-pop-next] #'forward-button
  [remap evil-paste-pop]      #'backward-button
  [remap evil-delete]         #'ignore
  [remap evil-delete-line]    #'ignore
  [remap evil-insert]         #'ignore
  [remap evil-append]         #'ignore
  [remap evil-replace]        #'ignore
  [remap evil-replace-state]  #'ignore
  [remap evil-change]         #'ignore
  [remap evil-change-line]    #'ignore
  [remap evil-visual-char]    #'ignore
  [remap evil-visual-line]    #'ignore)


;;
;;; Hooks

(defun +ndk-dashboard-reposition-point-h ()
  "Trap the point in the buttons."
  (when (region-active-p)
    (setq deactivate-mark t)
    (when (bound-and-true-p evil-local-mode)
      (evil-change-to-previous-state)))
  (or (ignore-errors
        (if (button-at (point))
            (forward-button 0)
          (backward-button 1)))
      (ignore-errors
        (goto-char (point-min))
        (forward-button 1))))

(defun +ndk-dashboard-reload-maybe-h (&rest _)
  "Reload the dashboard or its state.

If this isn't a dashboard buffer, move along, but record its `default-directory'
if the buffer is real. See `doom-real-buffer-p' for an explanation for what
'real' means.

If this is the dashboard buffer, reload it completely."
  (cond ((+ndk-dashboard-p (current-buffer))
         (let (+ndk-dashboard-inhibit-refresh)
           (ignore-errors (+ndk-dashboard-reload))))
        ((and (not (file-remote-p default-directory))
              (doom-real-buffer-p (current-buffer)))
         (setq +ndk-dashboard--last-cwd default-directory)
         (+ndk-dashboard-update-pwd-h))))

(defun +ndk-dashboard-reload-frame-h (_frame)
  "Reload the dashboard after a brief pause. This is necessary for new frames,
whose dimensions may not be fully initialized by the time this is run."
  (when (timerp +ndk-dashboard--reload-timer)
    (cancel-timer +ndk-dashboard--reload-timer)) ; in case this function is run rapidly
  (setq +ndk-dashboard--reload-timer
        (run-with-timer 0.1 nil #'+ndk-dashboard-reload t)))

(defun +ndk-dashboard-resize-h (&rest _)
  "Recenter the dashboard, and reset its margins and fringes."
  (let (buffer-list-update-hook
        window-configuration-change-hook
        window-size-change-functions)
    (when-let (windows (get-buffer-window-list (doom-fallback-buffer) nil t))
      (dolist (win windows)
        (set-window-start win 0)
        (set-window-fringes win 0 0)
        (set-window-margins
         win (max 0 (/ (- (window-total-width win) +ndk-dashboard--width) 2))))
      (with-current-buffer (doom-fallback-buffer)
        (save-excursion
          (with-silent-modifications
            (goto-char (point-min))
            (delete-region (line-beginning-position)
                           (save-excursion (skip-chars-forward "\n")
                                           (point)))
            (insert (make-string
                     (+ (max 0 (- (/ (window-height (get-buffer-window)) 2)
                                  (round (/ (count-lines (point-min) (point-max))
                                            2))))
                        (car +ndk-dashboard-banner-padding))
                     ?\n))))))))

(defun +ndk-dashboard--persp-detect-project-h (&rest _)
  "Set dashboard's PWD to current persp's `last-project-root', if it exists.

This and `+ndk-dashboard--persp-record-project-h' provides `persp-mode'
integration with the Doom dashboard. It ensures that the dashboard is always in
the correct project (which may be different across perspective)."
  (when (bound-and-true-p persp-mode)
    (when-let (pwd (persp-parameter 'last-project-root))
      (+ndk-dashboard-update-pwd-h pwd))))

(defun +ndk-dashboard--persp-record-project-h (&optional persp &rest _)
  "Record the last `doom-project-root' for the current persp.
See `+ndk-dashboard--persp-detect-project-h' for more information."
  (when (bound-and-true-p persp-mode)
    (set-persp-parameter
     'last-project-root (doom-project-root)
     (if (persp-p persp)
         persp
       (get-current-persp)))))


;;
;;; Library

(defun +ndk-dashboard-p (buffer)
  "Returns t if BUFFER is the dashboard buffer."
  (eq buffer (get-buffer +ndk-dashboard-name)))

(defun +ndk-dashboard-update-pwd-h (&optional pwd)
  "Update `default-directory' in the Doom dashboard buffer.
What it is set to is controlled by `+ndk-dashboard-pwd-policy'."
  (if pwd
      (with-current-buffer (doom-fallback-buffer)
        (doom-log "Changed dashboard's PWD to %s" pwd)
        (setq-local default-directory pwd))
    (let ((new-pwd (+ndk-dashboard--get-pwd)))
      (when (and new-pwd (file-accessible-directory-p new-pwd))
        (+ndk-dashboard-update-pwd-h
         (concat (directory-file-name new-pwd)
                 "/"))))))

(defun +ndk-dashboard-reload-on-theme-change-h ()
  "Forcibly reload the Doom dashboard when theme changes post-startup."
  (when after-init-time
    (+ndk-dashboard-reload 'force)))

(defun +ndk-dashboard-reload (&optional force)
  "Update the DOOM scratch buffer (or create it, if it doesn't exist)."
  (when (or (and (not +ndk-dashboard-inhibit-refresh)
                 (get-buffer-window (doom-fallback-buffer))
                 (not (window-minibuffer-p (frame-selected-window)))
                 (not (run-hook-with-args-until-success '+ndk-dashboard-inhibit-functions)))
            force)
    (with-current-buffer (doom-fallback-buffer)
      (doom-log "Reloading dashboard at %s" (format-time-string "%T"))
      (with-silent-modifications
        (let ((pt (point)))
          (unless (eq major-mode '+ndk-dashboard-mode)
            (+ndk-dashboard-mode))
          (erase-buffer)
          (run-hooks '+ndk-dashboard-functions)
          (goto-char pt)
          (+ndk-dashboard-reposition-point-h))
        (+ndk-dashboard-resize-h)
        (+ndk-dashboard--persp-detect-project-h)
        (+ndk-dashboard-update-pwd-h)
        (current-buffer)))))

;; helpers
(defun +ndk-dashboard--center (len s)
  (concat (make-string (ceiling (max 0 (- len (length s))) 2) ? )
          s))

(defun +ndk-dashboard--get-pwd ()
  (let ((lastcwd +ndk-dashboard--last-cwd)
        (policy +ndk-dashboard-pwd-policy))
    (cond ((null policy)
           default-directory)
          ((stringp policy)
           (expand-file-name policy lastcwd))
          ((functionp policy)
           (funcall policy lastcwd))
          ((null lastcwd)
           default-directory)
          ((eq policy 'last-project)
           (or (doom-project-root lastcwd)
               lastcwd))
          ((eq policy 'last)
           lastcwd)
          ((warn "`+ndk-dashboard-pwd-policy' has an invalid value of '%s'"
                 policy)))))


;;
;;; Widgets

(defun ndk-dashboard-draw-ascii-banner-fn ()
  (let* ((banner
          '("              .===' `===.          .==='.'===.          .===` '===.              "
            "           .=='   \\_|-_ `===. .==='   _|_   '===. .===` _-|_//   '==.           "
            "        .=='    _-'    `-_  `='    _-'   `-_    `='  _-'      '-_    '==.        "
            "     .=='    _-'          '-__\\._-'         '-_./__-'           '-_    '==.     "
            "  .=='    _-'                                                       '-_    '==.  "
            "=='    _-'                         E M A C S                           '-_    '=="
            "\\   _-'                                                                 '-_   \\"
            " `''                                                                         ''` "))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+ndk-dashboard--center
                +ndk-dashboard--width
                (concat
                 line (make-string (max 0 (- longest-line (length line)))
                                   32)))
               "\n"))
     'face 'ndk-dashboard-banner)))

(defun ndk-dashboard-widget-banner ()
  (let ((point (point)))
    (when (functionp +ndk-dashboard-ascii-banner-fn)
      (funcall +ndk-dashboard-ascii-banner-fn))
    (when (and (display-graphic-p)
               (stringp fancy-splash-image)
               (file-readable-p fancy-splash-image))
      (let ((image (create-image (fancy-splash-image-file))))
        (add-text-properties
         point (point) `(display ,image rear-nonsticky (display)))
        (save-excursion
          (goto-char point)
          (insert (make-string
                   (truncate
                    (max 0 (+ 1 (/ (- +ndk-dashboard--width
                                      (car (image-size image nil)))
                                   2))))
                   ? ))))
      (insert (make-string (or (cdr +ndk-dashboard-banner-padding) 0)
                           ?\n)))))

(defun ndk-dashboard-widget-loaded ()
  (insert
   "\n\n"
   (propertize
    (+ndk-dashboard--center
     +ndk-dashboard--width
     (doom-display-benchmark-h 'return))
    'face 'ndk-dashboard-loaded)
   "\n"))

(defun ndk-dashboard-widget-shortmenu ()
  (let ((all-the-icons-scale-factor 1.45)
        (all-the-icons-default-adjust -0.02))
    (insert "\n")
    (dolist (section +ndk-dashboard-menu-sections)
      (cl-destructuring-bind (label &key icon action when face key) section
        (when (and (fboundp action)
                   (or (null when)
                       (eval when t)))
          (insert
           (+ndk-dashboard--center
            (- +ndk-dashboard--width 1)
            (let ((icon (if (stringp icon) icon (eval icon t))))
              (format (format "%s%%s%%-10s" (if icon "%3s\t" "%3s"))
                      (or icon "")
                      (with-temp-buffer
                        (insert-text-button
                         label
                         'action
                         `(lambda (_)
                            (call-interactively (or (command-remapping #',action)
                                                    #',action)))
                         'face (or face 'ndk-dashboard-menu-title)
                         'follow-link t
                         'help-echo
                         (format "%s (%s)" label
                                 (propertize (symbol-name action) 'face 'ndk-dashboard-menu-desc)))
                        (format "%-37s" (buffer-string)))
                      ;; Lookup command keys dynamically
                      (propertize
                       (or key
                           (when-let*
                               ((keymaps
                                 (delq
                                  nil (list (when (bound-and-true-p evil-local-mode)
                                              (evil-get-auxiliary-keymap +ndk-dashboard-mode-map 'normal))
                                            +ndk-dashboard-mode-map)))
                                (key
                                 (or (when keymaps
                                       (where-is-internal action keymaps t))
                                     (where-is-internal action nil t))))
                             (with-temp-buffer
                               (save-excursion (insert (key-description key)))
                               (while (re-search-forward "<\\([^>]+\\)>" nil t)
                                 (let ((str (match-string 1)))
                                   (replace-match
                                    (upcase (if (< (length str) 3)
                                                str
                                              (substring str 0 3))))))
                               (buffer-string)))
                           "")
                       'face 'ndk-dashboard-menu-desc))))
           (if (display-graphic-p)
               "\n\n"
             "\n")))))))

(defun ndk-dashboard-widget-footer ()
  (insert
   "\n"
   (+ndk-dashboard--center
    (- +ndk-dashboard--width 2)
    (with-temp-buffer
      (insert-text-button (or (all-the-icons-octicon "octoface" :face 'ndk-dashboard-footer-icon :height 1.3 :v-adjust -0.15)
                              (propertize "github" 'face 'ndk-dashboard-footer))
                          'action (lambda (_) (browse-url "https://github.com/hlissner/doom-emacs"))
                          'follow-link t
                          'help-echo "Open Doom Emacs github page")
      (buffer-string)))
   "\n"))

#+end_src

** Agenda Function
  :PROPERTIES:
  ;:header-args:    :results silent
  :END:

*** Insert heading of section
#+begin_src emacs-lisp
(defun center-string-in-char (str len char)
                                        ;(store-substring
                                        ;(make-string len char) (/ (- len (length str)) 2) str)
  (concat str (make-string (- len (length str)) char ))
  )
(defun insert-section-heading(section-name color)
  (let ((heading-text (center-string-in-char section-name 78 ?-)))
    (insert
     (propertize heading-text 'face `(:foreground ,color))
     "\n"))
  )
#+end_src

#+RESULTS:
: insert-section-heading

*** Get agenda list

#+begin_src emacs-lisp :results silent
(declare-function org-habit-build-graph "org-habit" (habit starting current ending))
(declare-function org-is-habit-p "org-habit" (&optional pom))


(defun dashboard-agenda--formatted-headline ()
  "Set agenda faces to `HEADLINE' when face text property is nil."
  (let* ((headline (org-get-heading t t t t))
         (todo (or (org-get-todo-state) ""))
         (org-level-face (nth (- (org-outline-level) 1) org-level-faces))
         (todo-state (format org-agenda-todo-keyword-format todo)))
    (when (null (get-text-property 0 'face headline))
      (add-face-text-property 0 (length headline) org-level-face t headline))
    (when (null (get-text-property 0 'face todo-state))
      (add-face-text-property 0 (length todo-state) (org-get-todo-face todo) t todo-state))
    (concat todo-state " " headline)))

(defun dashboard-agenda--formatted-time ()
  "Get the scheduled or dead time of an entry.  If no time is found return nil."
  (when-let ((time (or (org-get-scheduled-time (point)) (org-get-deadline-time (point)))))
    (format-time-string "%Y-%m-%d" time)))

(defun dashboard-agenda-entry-format ()
  "Format agenda entry to show it on dashboard."
  (let* ((scheduled-time (org-get-scheduled-time (point)))
         (deadline-time (org-get-deadline-time (point)))
         (entry-time (or scheduled-time deadline-time))
         (item (org-agenda-format-item
                (dashboard-agenda--formatted-time)
                (dashboard-agenda--formatted-headline)
                (org-outline-level)
                (org-get-category)
                (org-get-tags)))
         (todo-state (org-get-todo-state))
         (todo-index (and todo-state
                          (length (member todo-state org-todo-keywords-1))))
         (is-habit (ndk-dashboard-org-is-habit-p))
         (habit-parse-todo-obj (and is-habit
                                    (org-habit-parse-todo)
                                    ))
         (closed-dates (and is-habit (ndk-dashboard-org-habit-get-closed-dates (point))))
         (entry-data (list 'dashboard-agenda-time entry-time
                           'dashboard-agenda-todo-index todo-index
                           'dashboard-agenda-file (buffer-file-name)
                           'closed-dates closed-dates
                           'habit-parse-todo-obj habit-parse-todo-obj
                           'dashboard-agenda-loc (point))))
    (add-text-properties 0 (length item) entry-data item)
    item))

(defvar org-agenda-prefix-format '())

(defun dashboard-get-agenda (filter skip)
  "Get agenda items for today or for a week from now."
  (let ((dashboard-agenda-prefix-format "%-10s "))
    (if-let ((prefix-format (assoc 'dashboard-agenda org-agenda-prefix-format)))
        (setcdr prefix-format dashboard-agenda-prefix-format)
      (push (cons 'dashboard-agenda dashboard-agenda-prefix-format) org-agenda-prefix-format))
    (org-compile-prefix-format 'dashboard-agenda))

  (org-map-entries 'dashboard-agenda-entry-format
                   filter
                   'agenda
                   skip))
#+end_src

#+RESULTS:
: dashboard-get-agenda
*** Create widget control
#+begin_src emacs-lisp
(defun create-todo-widget (element)
  ;; (widget-create 'item
  ;;                 :tag element
  ;;                 :notify 'action
  ;;                 )
  ;;(insert-text-button element)
  (let* ((position (get-text-property 0 'dashboard-agenda-loc element)))
    (insert
     (with-temp-buffer
       (insert-text-button element
                           'action
                           `(lambda(_)
                               (find-file "~/Dropbox/org/task.org")
                               (goto-char ,position)
                               (hl-line-mode)
                               (recenter)
                              )
                           'follow-link t
                           'help-echo (format "Position %s" position))
       (buffer-string))))
  (insert "\n")
  )

#+end_src

#+RESULTS:
: create-todo-widget


**   Sections
*** Tasks
#+begin_src emacs-lisp
(defun ndk-dashboard-agenda-section ()
  (insert-section-heading "Tasks" "orange")
  (let ((list (dashboard-get-agenda "/+TODO" nil)))
    (dolist (element
             (sort list
                   (lambda (entry1 entry2)
                     (let ((arg1 (get-text-property 0 'dashboard-agenda-time entry1))
                           (arg2 (get-text-property 0 'dashboard-agenda-time entry2)))
                       (time-less-p arg1 arg2)))))
      (create-todo-widget element)
      )
    )
  )

      #+end_src

#+RESULTS:
: ndk-dashboard-agenda-section
*** Done by today
#+begin_src emacs-lisp
(defun done-today ()
  (let ((scheduled-time (substring (org-entry-get (point) "CLOSED") 1 11))
        (today-date (format-time-string "%Y-%m-%d")))

    (unless (and scheduled-time
                 (string= scheduled-time today-date))
      (point))
    )
  )
(defun ndk-dashboard-done-section ()
  (insert-section-heading "Done By Today" "green")
  (let ((list (dashboard-get-agenda "/+DONE" 'done-today)))
    (dolist (element list )
      (create-todo-widget element))))

#+end_src

#+RESULTS:
: ndk-dashboard-done-section



*** Files
#+begin_src emacs-lisp
(defun ndk-dashboard-create-file-button (icon text link)
  (insert
   (with-temp-buffer
     (insert-text-button (format "%3s\t%s"
                                 (all-the-icons-faicon icon :face 'ndk-dashboard-menu-title :v-adjust 0.01)
                                 text)
                         'action
                         `(lambda (_) (find-file ,link))
                         'follow-link t
                         'face 'ndk-dashboard-menu-title
                         'help-echo (format "Open %s" text))
     (format "%-79s" (buffer-string)))))
(defun ndk-dashboard-files-section ()
  (insert-section-heading "Files" "orange")

  (ndk-dashboard-create-file-button "calendar-check-o" "Common.org" "~/Dropbox/org/common.org")
  (insert "\n")

  (ndk-dashboard-create-file-button "calendar-check-o" "Task.org" "~/Dropbox/org/Task.org")
  (insert "\n")
  (ndk-dashboard-create-file-button "pie-chart" "Work.org" "~/Dropbox/work/daily/work.org")
  (insert "\n")
  (ndk-dashboard-create-file-button "laptop" "Doom Config.org" "~/.doom.d/doom-config.org")
  (insert "\n")
  (ndk-dashboard-create-file-button "database" "Dashboard.org" "~/.doom.d/dashboard.org")
  (insert "\n")
  (ndk-dashboard-create-file-button "bicycle" "Running.org" "~/Dropbox/running/Running.org")
  (insert "\n")
  (ndk-dashboard-create-file-button "bitbucket" "Elisp Code.org" "~/Dropbox/Code/Elisp.org")
  (insert "\n")
  (ndk-dashboard-create-file-button "bitbucket" "Themes.org" "~/Dropbox/Code/Themes.org")
  (insert "\n"))
#+end_src

#+RESULTS:
: ndk-dashboard-files-section

*** Work
#+begin_src emacs-lisp
(defun ndk-dashboard-work-section ()
  (insert-section-heading "Works" "orange")
  (let ((list (dashboard-get-agenda "+/WORK" nil)))
    (dolist (element list nil)
      (create-todo-widget element))))
#+end_src

#+RESULTS:
: ndk-dashboard-work-section

*** Processing
#+begin_src emacs-lisp
(defun ndk-dashboard-inprogress-section ()
  (insert-section-heading "Processing" "orange")
  (let ((list (dashboard-get-agenda "+/PROCESSING" nil)))
    (dolist (element list nil)
      (create-todo-widget element)
      )))
#+end_src

#+RESULTS:
: ndk-dashboard-inprogress-section

*** Healths
#+begin_src emacs-lisp
(defun ndk-dashboard-health-section ()
  (insert-section-heading "Health" "orange")
  (let ((list (dashboard-get-agenda "+/HEALTH" nil)))
    (dolist (element list nil)
      (create-todo-widget element)
      )
    )
  )
#+end_src

*** HABIT
#+begin_src emacs-lisp
(org-babel-load-file
 (expand-file-name "/Users/khanh/Dropbox/Code/OrgHabit.org"))
#+end_src

#+RESULTS:
: Loaded /Users/khanh/Dropbox/Code/OrgHabit.el

#+begin_src emacs-lisp

(defun ndk-dashboard-habitance-section ()
  (insert-section-heading "Habitance" "orange")
  (let ((list (dashboard-get-agenda "+/HABIT" nil)))
    (dolist (element list nil)
      (create-todo-widget element)

      (let* ((list-time "")
             (count 0)
             (todo-obj (get-text-property 0 'habit-parse-todo-obj element))
             (moment (time-subtract nil (* 3600 org-extend-today-until)))
             (closed-dates (get-text-property 0 'closed-dates element)))
        (when closed-dates

          (while closed-dates
            (let ((date (car closed-dates)))
              (when (string= (format-time-string "%Y-%m-%d" date) (format-time-string "%Y-%m-%d"))
                (setq count (+ count 1))
                (setq list-time (concat list-time " " (format-time-string "%H:%M" date))))
              )
            (setq closed-dates (cdr closed-dates)))
          (widget-create 'item
                         :tag (concat
                               (propertize (format "%18s(%d times)%s" "" count list-time) 'face '(:foreground "green"))
                               (org-habit-build-graph
                                todo-obj
                                (time-subtract moment (days-to-time org-habit-preceding-days))
                                moment
                                (time-add moment (days-to-time org-habit-following-days)))
                               )
                         )
          )
        )

      )
    )
  )
#+end_src

#+RESULTS:
: ndk-dashboard-habitance-section


** Plug my-menu to the dashboard
#+begin_src emacs-lisp
(set-face-attribute 'button nil :inherit nil)
(defun ndk-dashboard-widget-mymenu()
  (ndk-dashboard-files-section)
  (ndk-dashboard-inprogress-section)
  (ndk-dashboard-work-section)
  (ndk-dashboard-agenda-section)
  (ndk-dashboard-habitance-section)
  (ndk-dashboard-health-section)
  (ndk-dashboard-done-section)
  )
(setq +ndk-dashboard-functions
      '(ndk-dashboard-widget-banner
        ndk-dashboard-widget-mymenu))

(map! "<f2>" (lambda() (interactive) (+ndk-dashboard/open (selected-frame))))
(+ndk-dashboard/open (selected-frame))


#+end_src

#+RESULTS:
: #<buffer *scratch*>
